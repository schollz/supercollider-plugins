class:: NasalDemons
summary:: Play arbitrary memory regions
categories:: UGens>Generators

description::

The name "Nasal Demons" comes from a metaphor to describe what could happen when a program produces Undefined Behavior, such as when accessing random or out-of-bounds memory addresses.
WARNING::
Although it can be used more or less "safely" by obtaining valid memory ranges from your OS, this UGen is very likely to crash the server. Use at your own risk!
::

classmethods::

method::ar

argument::numChannels
Number of desired output channels. Treats the memory block as an interleaved buffer: if numChannels==2, from a sequence of values [1,2,3,4], channel 0 will get [1,3] and channel 1 will get [2,4]

argument::block
A link::Classes/NasalDemonsMemBlock::, containing a block of memory's start and end addresses. Not modulateable, as it's read only at creation time, and gets automatically converted in a format the UGen can receive.
See link::#Getting Memory Blocks:: below.

argument::size
Fraction of the block's size to play (0: none, 1: whole block, >1:almost certain crash). Modulateable (although this doesn't mean you are guaranteed not to crash the server).

argument::loop
1: loop the memory range. 0: when end of the block is reached, set the done flag and stop. Modulateable.

argument::rate
Playback rate. Modulateable.
note::
Although no interpolation is performed, negative and fractional rates are allowed.
::

argument::post
If > 0, post current memory address to console once per audio processing block

subsection::Getting Memory Blocks
note::The following methods were developed and tested on Linux and Mac platforms only. They won't work on Windows, sorry.::
note::Since these functions are about getting addresses from scsynth's memory space, the server needs to be booted for any of them to work::

method::getReadableBlocks
Linux: parses memory addresses from /proc/s.pid/mem.
Mac: parses memory addresses from vmmap output
returns:: an array of link::Classes/NasalDemonsMemBlock::s for each block

method::getHeapBlocks
Linux: parses /proc/s.pid/mem to find addresses marked as "[heap]"
Mac: parses vmmap output to find addresses marked as "MALLOC"
returns:: an array of link::Classes/NasalDemonsMemBlock::s for each block

method::getStackBlocks
Linux: parses /proc/s.pid/mem to find addresses marked as "[stack]"
Mac: parses vmmap output to find addresses marked as "stack" (case insensitive)
returns:: an array of link::Classes/NasalDemonsMemBlock::s for each block


examples::
WARNING::
Expect ridiculously loud and "bad" output values. Beware of volume and be responsible for your health and equipment. You could, for example, clip, fold, wrap or limit the output.
::
code::

(
s.waitForBoot{
  ~blocks = NasalDemons.getReadableBlocks;
  ~heap = NasalDemons.getHeapBlocks;
  ~stack = NasalDemons.getStackBlocks;
}
)

// looping your heap:
{ NasalDemons.ar(2,~heap.first) }.play;

// clipping limits it to a more reasonable range
{ NasalDemons.ar(2,~heap.first).clip2(1) }.play;

// looping multiple, random blocks
{ Splay.ar(NasalDemons.ar(1,{~blocks.choose}!4)) }.play


// not looping:
// this function will create a synth that frees itself when reaching the end of the memory block
// after the synth is freed, the function calls itself again to create a new one
~playBlock = {|block_n|
    var synth = {
        var block = if(block_n.isNil){~blocks.choose}{~blocks@@block_n};
        var nasal = NasalDemons.ar(1,block.debug,loop:0);
        FreeSelfWhenDone.kr(nasal);
        nasal!2
    }.play;
    synth.onFree{~playBlock.value(if(block_n.isNil){nil}{block_n+1})}
};

// play all ranges in sequence
~playBlock.value(0)

// or randomly
~playBlock.value

// looping on and off with mousebutton
{ NasalDemons.ar( 1, ~blocks.choose, loop: MouseButton.kr(0,2)) }.play

// rate modulation: a nice major chord, so to say
{NasalDemons.ar(2,~heap.first, rate: [1,1.25,1.5,15/8]).clip2(0.25).sum}.play

(
// use your mouseXY here
{
    NasalDemons.ar(2,~heap.first,
     size: MouseX.kr.exprange(1,0.005).poll,
     rate:  MouseY.kr(1,1000)*[1,1.25, 1.5, 15/8]
    ).clip2(0.2).sum
}.play;
)
::
