TITLE:: SuperPhasorX
summary:: UGen to interface with multiple SuperBufRds and XFade2s for playback of long sound buffers.
categories:: UGens>Triggers, UGens>Buffer
related:: Classes/Phasor, Classes/SuperPhasor, Classes/SuperBufRd, Classes/SuperPlayBuf, Classes/SuperPlayBufX

DESCRIPTION::
To get around scsynth's architectural limitation that only supports 32-bit floating point values, SuperPhasor and link::Classes/SuperBufRd:: use pairs of floats representing integer / float components of a double-precision value. To generate such a pair directly in sclang, use link::Classes/SuperIndex::.

SuperPhasorX generates int/float pairs for four SuperBufRds with three XFade2s, to implement smooth crossfading on looping and seeking, to be connected like so:

image::SuperPhasorXSm.png#Figure 1. SuperPhasorX diagram::

note::
For most purposes it is probably much easier to use the link::Classes/SuperPlayBuf:: / link::Classes/SuperPlayBufX:: family of pseudo-ugens.
::


CLASSMETHODS::

METHOD:: ar

ARGUMENT:: trig
When triggered, jump to the reset position. (kr or ar)

ARGUMENT:: rate
The amount of change per sample, i.e. at a rate of 1 the value of each sample will be 1 greater than the preceding sample. This can be positive or negative. (kr or ar)

ARGUMENT:: startInt
Integer portion of the start position of the loop / playback range. (kr)

ARGUMENT:: startDec
Fractional portion of the start position of the loop / playback range. (kr)

ARGUMENT:: endInt
Integer portion of the end position of the loop / playback range. (kr)

ARGUMENT:: endDec
Fractional portion of the end position of the loop / playback range. (kr)

ARGUMENT:: resetInt
Integer portion of the reset position. (kr)

ARGUMENT:: resetDec
Fractional portion of the reset position. (kr)

ARGUMENT:: loop
Whether to loop at the ends of the playback range or not. 1 is true, 0 is false. (kr)

ARGUMENT:: overlap
Number of samples to overlap/crossfade at beginning and end, and when jumping to reset position. This will be clipped to max out at half the playback range. (kr)

returns:: [phase0Int, phase0Dec, phase1Int, phase1Dec, pan0, phase2Int, phase2Dec, phase3Int, phase3Dec, pan1, pan2, isPlaying]


INSTANCEMETHODS::

PRIVATE:: init


EXAMPLES::

code::
b = Buffer.read(s, Platform.resourceDir +/+ "sounds/a11wlk01.wav");

// Compare with example from SuperPhasor
(
{
  var phaseInt, phaseDec;
  var trig = MouseButton.kr(0, 1, 0);
  # phaseInt, phaseDec = SuperPhasor.ar(trig, BufRateScale.kr(b) * MouseX.kr(0.1, 10, \exponential), 0, 0, Float.from32Bits(b.numFrames), 0, Float.from32Bits(b.numFrames/2));
  SuperBufRd.ar(1, b, phaseInt, phaseDec)!2;
}.play;
)

// Same thing with SuperPhasorX
(
{
  var phaseIntAsFloat0, phaseDec0, phaseIntAsFloat1, phaseDec1, pan0,
  phaseIntAsFloat2, phaseDec2, phaseIntAsFloat3, phaseDec3, pan1,
  pan2, isPlaying;
  var trig = MouseButton.kr(0, 1, 0);
  var sig0, sig1, sig2, sig3, sig;
  # phaseIntAsFloat0, phaseDec0, phaseIntAsFloat1, phaseDec1, pan0,
  phaseIntAsFloat2, phaseDec2, phaseIntAsFloat3, phaseDec3, pan1,
  pan2, isPlaying = SuperPhasorX.ar(trig, BufRateScale.kr(b) * MouseX.kr(0.1, 10, \exponential), 0, 0, Float.from32Bits(b.numFrames), 0, Float.from32Bits(b.numFrames/2), overlap: 10000);
  sig0 = SuperBufRd.ar(1, b, phaseIntAsFloat0, phaseDec0);
  sig1 = SuperBufRd.ar(1, b, phaseIntAsFloat1, phaseDec1);
  sig2 = SuperBufRd.ar(1, b, phaseIntAsFloat2, phaseDec2);
  sig3 = SuperBufRd.ar(1, b, phaseIntAsFloat3, phaseDec3);
  sig = XFade2.ar(XFade2.ar(sig0, sig1, pan0), XFade2.ar(sig2, sig3, pan1), pan2);
  sig!2;
}.play
)
::
